#!/usr/bin/env python3
"""usage: generate_weighted_network_linklist [-h] -r -c -o

Generate weighted network matrix files for clustering use with infomap.

Arguments:
  -h, --help        show this help message and exit

  -r, --roi-dir     Path to a single binary Nifti ROI, or path to CSV containing binary 
                    Nifti ROI paths.

  -t, --threshold   Level to threshold Pearson Correlations at.

  -p, --percent-threshold   Level to threshold Pearson Correlations at top X percent.

  -c, --config      Name of precomputed connectome config file to use.

  -o, --output-dir  Path to output directory.

"""

import os
import argparse
import numpy as np
from tqdm import trange
from pfctoolkit import tools, config, datasets, clustering


def write_linklist(
    output_dir, roi, threshold_x, threshold_y, roi_weight_matrix, threshold_str
):
    with open(
        os.path.join(
            output_dir,
            f"{os.path.basename(roi[0]).split('.nii')[0]}_{threshold_str}_linklist.txt",
        ),
        "w",
    ) as fp:
        for i in trange(len(threshold_x)):
            fp.write(
                f"{threshold_x[i]+1} {threshold_y[i]+1} {roi_weight_matrix[threshold_x[i],threshold_y[i]]}\n"
            )


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Generate weighted network link-lists for clustering with infomap."
    )
    group = parser.add_mutually_exclusive_group(required=True)

    parser.add_argument(
        "-r",
        "--roi",
        metavar="\b",
        help="Path to a single binary Nifti ROI.",
        type=str,
        required=True,
    )

    group.add_argument(
        "-t",
        "--threshold",
        metavar="\b",
        nargs="*",
        help="Level to threshold Pearson Correlations at.",
        type=float,
        required=False,
    )

    group.add_argument(
        "-p",
        "--percent-threshold",
        metavar="\b",
        nargs="*",
        help="Level to threshold Pearson Correlations at top X percent.",
        type=float,
        required=False,
    )

    parser.add_argument(
        "-c",
        "--config",
        metavar="\b",
        help="Name of precomputed connectome config file to use.",
        type=str,
        required=True,
    )

    parser.add_argument(
        "-o",
        "--output-dir",
        metavar="\b",
        help="Path to output directory.",
        type=str,
        required=True,
    )

    # Parse arguments
    args = parser.parse_args()

    # Load ROI list
    roi = tools.load_roi(os.path.abspath(args.roi))

    # Load and check PCC configuration
    pcc_config = config.Config(args.config)

    # Set output directory
    output_dir = os.path.abspath(args.output_dir)

    # Load brain mask
    brain_mask = datasets.get_img(pcc_config.get("mask"))

    # Get chunks
    chunks = tools.get_chunks(roi, pcc_config)

    roi_weight_matrix, roi_size = clustering.generate_weighted_network_matrix(
        roi, chunks, pcc_config
    )
    for i in range(roi_size):
        roi_weight_matrix[i, i] = 0
    if args.threshold:
        for threshold in args.threshold:
            threshold_x, threshold_y = np.where(roi_weight_matrix > threshold)
            threshold_string = f"thr-{threshold}"
            write_linklist(
                output_dir,
                roi,
                threshold_x,
                threshold_y,
                roi_weight_matrix,
                threshold_string,
            )
    elif args.percent_threshold:
        for threshold in args.percent_threshold:
            exclude = int(np.floor(roi_size**2 * (1 - threshold)))
            threshold_x, threshold_y = np.dstack(
                np.unravel_index(
                    np.argsort(roi_weight_matrix.ravel()), (roi_size, roi_size)
                )
            )[0][:exclude:-1, :].transpose()
            threshold_string = f"pthr-{threshold}"
            write_linklist(
                output_dir,
                roi,
                threshold_x,
                threshold_y,
                roi_weight_matrix,
                threshold_string,
            )
    else:
        raise ValueError("No Threshold Set!")
